name: Terraform CI/CD
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  terraform-validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Check App File
        run: test -f app/index.html || (echo "index.html missing!" && exit 1)
      - name: Terraform Init
        run: terraform init -backend=false
      - name: Terraform Validate
        run: terraform validate

  terraform-dev:
    name: Deploy Dev Environment
    needs: terraform-validate
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        run: terraform init
      - name: Terraform Workspace
        run: terraform workspace select dev 2>/dev/null || terraform workspace new dev
      - name: Terraform Plan Dev
        run: terraform plan -var="environment=dev" -out=tfplan
      - name: Terraform Apply Dev
        run: terraform apply -auto-approve tfplan

  terraform-prod:
    name: Deploy Production Environment
    needs: terraform-dev
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        run: terraform init
      - name: Terraform Workspace
        run: terraform workspace select prod 2>/dev/null || terraform workspace new prod
      - name: Terraform Plan Prod
        run: terraform plan -var="environment=prod" -out=tfplan-prod
      - name: Terraform Apply Prod
        run: terraform apply -auto-approve tfplan-prod
      - name: Test App Content
        run: |
          echo "Listing instances for prod environment:"
          aws ec2 describe-instances --filters "Name=tag:Environment,Values=prod" --query "Reservations[].Instances[].{InstanceId:InstanceId,State:State.Name,PublicIpAddress:PublicIpAddress}" --output json
          
          PUBLIC_IPS=$(aws ec2 describe-instances --filters "Name=tag:Environment,Values=prod" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "Found public IPs: $PUBLIC_IPS"
          if [ -z "$PUBLIC_IPS" ]; then
            echo "No public IPs found for prod instances"
            exit 1
          fi
          
          for IP in $PUBLIC_IPS; do
            echo "Testing Nginx on $IP"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 30 http://$IP)
            echo "HTTP response code: $HTTP_CODE"
            if [ "$HTTP_CODE" == "200" ]; then
              CONTENT=$(curl -s http://$IP)
              echo "Content received: $CONTENT"
              if echo "$CONTENT" | grep -q "Version"; then
                echo "Successfully verified Version in index.html on $IP"
                exit 0
              else
                echo "Version not found in index.html content on $IP"
                exit 1
              fi
            else
              echo "HTTP response code $HTTP_CODE from $IP"
              exit 1
            fi
          done