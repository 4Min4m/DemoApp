name: Terraform CI/CD
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity
      - name: Check App File
        run: test -f app/index.html || (echo "index.html missing!" && exit 1)
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: terraform plan -out=tfplan
      - name: Terraform Apply Dev
        run: terraform apply -auto-approve tfplan
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  deploy-prod:
    needs: terraform
    environment: production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        run: terraform init
      - name: Debug Environment Variable
        run: echo Environment=prod
      - name: Terraform Refresh
        run: terraform refresh -var="environment=prod"
      - name: Terraform Apply Prod
        run: terraform apply -var="environment=prod" -auto-approve
      - name: Debug EC2 Instances
        run: |
          echo "Listing Auto Scaling Groups for prod:"
          aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?Tags[?Key=='Environment' && Value=='prod']].{AutoScalingGroupName:AutoScalingGroupName,DesiredCapacity:DesiredCapacity,LaunchTemplate:LaunchTemplate.LaunchTemplateId}" --output json
          echo "Listing EC2 Instances for prod:"
          aws ec2 describe-instances --filters "Name=tag:Environment,Values=prod" --query "Reservations[].Instances[].{InstanceId:InstanceId,PublicIpAddress:PublicIpAddress,State:State.Name,Tags:Tags}" --output json
      - name: Test App Content
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Environment,Values=prod" --query "Reservations[].Instances[].PublicIpAddress" --output text)
          if [ -z "$PUBLIC_IP" ]; then echo "No public IP found for prod instances"; exit 1; fi
          curl --fail http://$PUBLIC_IP | grep "Version"
      - name: Notify via SNS
        if: always()
        run: |
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} --message "Pipeline ${{ job.status }} for ${{ github.repository }}"